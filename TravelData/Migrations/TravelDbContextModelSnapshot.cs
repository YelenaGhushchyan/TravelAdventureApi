// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelData.Data;

#nullable disable

namespace TravelData.Migrations
{
    [DbContext(typeof(TravelDbContext))]
    partial class TravelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("TravelData.Models.AdventurePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuideId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.ToTable("AdventurePackages");
                });

            modelBuilder.Entity("TravelData.Models.Guide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("TravelData.Models.Traveler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PassportNumber")
                        .IsUnique();

                    b.ToTable("Travelers");
                });

            modelBuilder.Entity("TravelData.Models.TravelerAdventure", b =>
                {
                    b.Property<int>("TravelerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdventurePackageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TravelerId", "AdventurePackageId");

                    b.HasIndex("AdventurePackageId");

                    b.ToTable("TravelerAdventures");
                });

            modelBuilder.Entity("TravelData.Models.TravelerProfile", b =>
                {
                    b.Property<int>("TravelerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicalNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TravelerId");

                    b.ToTable("TravelerProfiles");
                });

            modelBuilder.Entity("TravelData.Models.AdventurePackage", b =>
                {
                    b.HasOne("TravelData.Models.Guide", "Guide")
                        .WithMany("AdventurePackages")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("TravelData.Models.TravelerAdventure", b =>
                {
                    b.HasOne("TravelData.Models.AdventurePackage", "AdventurePackage")
                        .WithMany("TravelerAdventures")
                        .HasForeignKey("AdventurePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelData.Models.Traveler", "Traveler")
                        .WithMany("TravelerAdventures")
                        .HasForeignKey("TravelerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdventurePackage");

                    b.Navigation("Traveler");
                });

            modelBuilder.Entity("TravelData.Models.TravelerProfile", b =>
                {
                    b.HasOne("TravelData.Models.Traveler", "Traveler")
                        .WithOne("Profile")
                        .HasForeignKey("TravelData.Models.TravelerProfile", "TravelerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Traveler");
                });

            modelBuilder.Entity("TravelData.Models.AdventurePackage", b =>
                {
                    b.Navigation("TravelerAdventures");
                });

            modelBuilder.Entity("TravelData.Models.Guide", b =>
                {
                    b.Navigation("AdventurePackages");
                });

            modelBuilder.Entity("TravelData.Models.Traveler", b =>
                {
                    b.Navigation("Profile");

                    b.Navigation("TravelerAdventures");
                });
#pragma warning restore 612, 618
        }
    }
}
